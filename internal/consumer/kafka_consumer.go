// consumer: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
package consumer

import (
	"LZero/internal/service"
	"LZero/pkg/models"
	"context"
	"encoding/json"
	"log"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/segmentio/kafka-go"
)

// StartKafkaConsumer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Å—å—é–º–µ—Ä Kafka –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
func StartKafkaConsumer(pool *pgxpool.Pool) {
	ctx := context.Background()
	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka reader
	reader := kafka.NewReader(kafka.ReaderConfig{
		Brokers: []string{"localhost:9092"},
		Topic:   "orders_topic",
		GroupID: "orders_consumer",
	})
	defer reader.Close()

	log.Println("üîç –ö–æ–Ω—Å—å—é–º–µ—Ä Kafka –∑–∞–ø—É—â–µ–Ω")
	// —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞
	for {
		msg, err := reader.ReadMessage(ctx)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			continue
		}

		// –ø–∞—Ä—Å–∏–Ω–≥ JSON –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Order
		var order models.Order
		if err := json.Unmarshal(msg.Value, &order); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
			continue
		}

		// —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
		if err := service.SaveOrder(pool, order); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: %v", err)
			continue
		}
		// –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (commit)
		if err := reader.CommitMessages(ctx, msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		log.Printf("–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", order.OrderUID)
	}
}
